syntax = "proto3";
package network;

message PublicKey {
  bytes borsh = 1;
}

message SocketAddr {
  bytes borsh = 1;
}

message PeerInfo {
  PublicKey id = 1;
  SocketAddr addr = 2;
  string account_id = 3;
}

message CryptoHash {
  // TODO: documentation
  // 32 bytes, blake2(?)
  bytes hash = 1;
}

message Edge {
  bytes borsh = 1;
}

message PartialEdgeInfo {
  bytes borsh = 1;
}

message AnnounceAccount {
  bytes borsh = 1;
}

message Block {
  bytes borsh = 1;
}

message BlockHeader {
  bytes borsh = 1;
}

message GenesisId {
  string chain_id = 1;
  CryptoHash hash = 2;
}

message PeerChainInfo {
  GenesisId genesis_id = 1;
  uint64 height = 2;
  repeated uint64 tracked_shards = 3;
  bool archival = 4;
}

//////////////////////////////////////

message Handshake {
  uint32 protocol_version = 1;
  uint32 oldest_protocol_version = 2;
  PublicKey sender_peer_id = 3;
  PublicKey target_peer_id = 4;
  uint32 sender_listen_port = 5;
  PeerChainInfo sender_chain_info = 6;
  PartialEdgeInfo partial_edge_info = 7;
}

message HandshakeFailure {
  enum Reason {
    UNKNOWN = 0,
    ProtocolVersionMismatch = 1,
    GenesisMismatch = 2,
    InvalidTarget = 3,
  }

  PeerInfo peer_info = 1;
  Reason reason = 2;
  GenesisId genesis_id = 3;
  uint32 version = 4;
  uint32 oldest_supported_version = 5;
}

message LastEdge {
  Edge edge = 1;
}

message RoutingTableUpdate {
  repeated Edge edges = 1;
  repeated AnnounceAccount accounts = 2;
}

message UpdateNonceRequest {
  PartialEdgeInfo partial_edge_info = 1;
}

message UpdateNonceResponse {
  Edge edge = 1;
}

message PeersRequest {}

message PeersResponse {
  repeated PeerInfo peers = 1;
}

message BlockHeadersRequest {
  repeated CryptoHash block_hashes = 1;
}

message BlockHeadersResponse {
  repeated BlockHeader block_headers = 1;
}

message BlockRequest {
  CryptoHash block_hash = 1;
}

message BlockResponse {
  Block block = 1;
}

message SignedTransaction {
  bytes borsh = 1;
}

message RoutedMessage {
  bytes borsh = 1; 
}

message Disconnect {}

message Challenge {
  bytes borsh = 1;
}

message EpochSyncRequest {
  CryptoHash epoch_id = 1;
}

message EpochSyncResponse {
  bytes borsh = 1;
}

message EpochSyncFinalizationRequest {
  CryptoHash epoch_id = 1;
}

message EpochSyncFinalizationResponse {
  bytes borsh = 1;
}

message RoutingSyncV2 {
  bytes borsh = 1;
}

message PeerMessage {
  oneof type {
    Handshake handshake = 1;
    HandshakeFailure handshake_failure = 2;
    LastEdge last_edge = 3;
    RoutingTableUpdate sync_routing_table = 4;
    
    UpdateNonceRequest update_nonce_request = 5;
    UpdateNonceResponse update_nonce_response = 6;

    PeersRequest peers_request = 5;
    PeersResponse peers_response = 6;
    
    BlockHeadersRequest block_headers_request = 7;
    BlockHeadersResponse block_headers = 8;
    
    BlockRequest block_request = 9;
    BlockResponse block = 10;
    
    SignedTransaction transaction = 11;
    RoutedMessage routed = 12;
    Disconnect disconnect = 13;
    Challenge challenge = 14;
    
    EpochSyncRequest epoch_sync_request = 15;
    EpochSyncResponse epoch_sync_response = 16;
    
    RoutingSyncV2 routing_table_sync_v2 = 17;
  }
}
